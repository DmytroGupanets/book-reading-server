{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.4",
    "title": "Books-reading API docs",
    "contact": {
      "name": "Tofik Hasanov"
    },
    "description": "API documentation for GoIT project 'Books-reading'. [Backend github repository](https://github.com/DmytroGupanets/book-reading-server)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "servers": [
    {
      "url": "https://books-reading.herokuapp.com"
    },
    {
      "url": "https://localhost:5000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Books",
      "description": "Books endpoints"
    },
    {
      "name": "Targets",
      "description": "Targets endpoints"
    }
  ],
  "paths": {
    "/api/auth/google": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google authentication",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with token in query). Then use GET /user/info",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/api/users/:id": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user info",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGetById"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user info",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/api/users/verify/:verifyToken": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Verification status",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyToken"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/api/users/verify": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Verification operation",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification email sent",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Verification has already been passed",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/api/books/": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all books",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooksInfo"
                }
              }
            }
          },
          "404": {
            "description": "Books not found",
            "content": {}
          }
        }
      }
    },
    "/api/books/:id": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get book by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookByID"
                }
              }
            }
          },
          "404": {
            "description": "Books not found",
            "content": {}
          }
        }
      }
    },
    "/api/bоoks/": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Add book",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBook"
                }
              }
            }
          },
          "404": {
            "description": "Books not found",
            "content": {}
          }
        }
      }
    },
    "/api/bоoks/status/:id": {
      "patch": {
        "tags": [
          "Books"
        ],
        "summary": "Update status",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusBook"
                }
              }
            }
          },
          "400": {
            "description": "Missing status field",
            "content": {}
          },
          "404": {
            "description": "Book with id=${id} not found!",
            "content": {}
          }
        }
      }
    },
    "/api/bоoks/resume/:id": {
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Add resume by id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddResume"
                }
              }
            }
          },
          "400": {
            "description": "Resume field is empty",
            "content": {}
          },
          "404": {
            "description": "Book  not found!",
            "content": {}
          }
        }
      }
    },
    "/api/targets/:id": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get Target By Id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {}
          },
          "404": {
            "description": "Id  not found!",
            "content": {}
          }
        }
      }
    },
    "/api/targets/completed/:id": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Reset Task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Reset Task successfully",
            "content": {}
          },
          "404": {
            "description": "Id  not found!",
            "content": {}
          }
        }
      }
    },
    "/api/targets/": {
      "post": {
        "tags": [
          "Targets"
        ],
        "summary": "Add targets",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddTargets"
                }
              }
            }
          },
          "400": {
            "description": "id is not correct",
            "content": {}
          },
          "404": {
            "description": "Target  not found!",
            "content": {}
          }
        }
      }
    },
    "/api/targets/records/:id": {
      "patch": {
        "tags": [
          "Targets"
        ],
        "summary": "Update Records",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Reset Task successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRecords"
                }
              }
            }
          },
          "404": {
            "description": "Id  not found!",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Valera"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully authenticated"
          },
          "success": {
            "type": "boolean",
            "example": "true"
          },
          "token": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          }
        }
      },
      "UserGetById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "user id"
          },
          "message": {
            "type": "string",
            "description": "Success"
          },
          "data": {
            "type": "object",
            "description": "data"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "user id"
          },
          "name": {
            "type": "string",
            "description": "user name"
          },
          "isVerified": {
            "type": "string",
            "description": "status"
          },
          "email": {
            "type": "string",
            "description": "email",
            "format": "email"
          }
        }
      },
      "BooksInfo": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success"
          },
          "books": {
            "type": "object",
            "description": "Get All Books"
          }
        }
      },
      "GetBookByID": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of book"
          },
          "author": {
            "type": "string",
            "description": "authors of book"
          },
          "year": {
            "type": "number",
            "description": "years of book"
          },
          "pages": {
            "type": "number",
            "description": "pages of book"
          },
          "status": {
            "type": "string",
            "description": "status of this book"
          },
          "resume": {
            "type": "object",
            "description": "status of this book"
          },
          "owner": {
            "description": "owner of this book"
          },
          "timestamps": {
            "description": "times when added this book"
          }
        }
      },
      "VerifyToken": {
        "type": "object",
        "properties": {
          "verifyToken": {
            "type": "string",
            "description": "user token"
          },
          "isVerified": {
            "type": "boolean",
            "description": "verify status"
          }
        }
      },
      "AddBook": {
        "type": "object",
        "properties": {
          "bookName": {
            "type": "string",
            "description": "Name of book"
          }
        }
      },
      "UpdateStatusBook": {
        "type": "object",
        "properties": {
          "book": {
            "type": "string",
            "description": "Name of book"
          }
        }
      },
      "AddResume": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "AddTargets": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "multi": {
            "type": "boolean"
          }
        }
      },
      "UpdateRecords": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "pages": {
            "type": "string"
          }
        }
      }
    }
  },
  "securitySchemes": {
    "Bearer": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "JWT"
    }
  }
}